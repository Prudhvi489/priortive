{"ast":null,"code":"//formatType(1) 2023-06-15T23:00:00 ----> Thu, Jun 15, 2023 at 23:00\n//formatType() 2023-06-15T23:00:00 ----> 15:00, 16 JUN\nexport function convertDateFormat(dateString, formatType) {\n  const date = new Date(dateString);\n\n  // const options = {\n  //   weekday: \"short\",\n  //   year: \"numeric\",\n  //   month: \"short\",\n  //   day: \"numeric\",\n  //   hour: \"2-digit\",\n  //   minute: \"2-digit\",\n  //   hour12: false, // Set to false for 24-hour format\n  // };\n  const options = {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    day: \"numeric\",\n    month: \"short\",\n    hour12: false // Set to false for 24-hour format\n  };\n\n  const formattedDate = date.toLocaleString(\"en-US\", options);\n  return formattedDate.toUpperCase();\n}\n\n//   --------------------------------------------------------------------------------------\nexport function getTimeDifferenceBtTwoDates(startDateString, endDateString) {\n  let trimmedStartDateString, trimmedEndDateString;\n  if (startDateString.includes('Z') && endDateString.includes('Z')) {\n    //2023-07-13T01:10:00.000Z\n    trimmedStartDateString = startDateString.slice(0, -5);\n    trimmedEndDateString = endDateString.slice(0, -5);\n  } else {\n    //2023-07-07T01:02:00\n    trimmedStartDateString = startDateString;\n    trimmedEndDateString = endDateString;\n  }\n  const startDate = new Date(trimmedStartDateString);\n  const endDate = new Date(trimmedEndDateString);\n  const timeDifferenceInMs = Math.abs(endDate - startDate);\n  const hours = Math.floor(timeDifferenceInMs / (1000 * 60 * 60));\n  const minutes = Math.floor(timeDifferenceInMs / (1000 * 60) % 60);\n  return `${hours} hrs ${minutes} min`;\n}\n//**  ChargeType Amount = 1 ₹ , Percentage = 2 % ,Nights = 3   */\nexport function convertArrayToTable(array) {\n  if (array && array.length > 0) {\n    let table = '<table className=\"tablesClass\">';\n\n    // Create table header\n    table += '<thead><tr><th>FromDate</th><th>ToDate</th><th>PolicyString</th><th>CancellationCharge</th></tr></thead>';\n    array.forEach(obj => {\n      var _obj$CancellationChar;\n      const fromDate = convertDateFormat(obj.FromDate);\n      const toDate = convertDateFormat(obj.ToDate);\n      const policyString = obj.PolicyString;\n      const CancellationCharge = `${(_obj$CancellationChar = obj === null || obj === void 0 ? void 0 : obj.CancellationCharge) !== null && _obj$CancellationChar !== void 0 ? _obj$CancellationChar : \"\"} ${(obj === null || obj === void 0 ? void 0 : obj.CancellationChargeType) === 1 ? \"₹\" : \"%\"}`;\n\n      // Create a new row in the table\n      table += `<tbody><tr><td>${fromDate}</td><td>${toDate}</td><td>${policyString}</td> <td>${CancellationCharge}</td></tr></tbody>`;\n    });\n    table += '</table>';\n    return table;\n  }\n}\n// handleCharSpace for first letter\nexport const handleCharSpace = e => {\n  var _e$target$value;\n  const inputValue = e.target.value;\n  let onlyAlphaRegix = /^[a-zA-Z]+$/;\n  if (((_e$target$value = e.target.value) === null || _e$target$value === void 0 ? void 0 : _e$target$value.length) === 0 && e.which === 32) {\n    e.preventDefault();\n  }\n  // else if(!onlyAlphaRegix.test(inputValue)){\n  //   e.preventDefault();\n  // }\n};\n// handleChange input only numbers\nexport const handleNumInput = e => {\n  const isNumberKey = /^[0-9]$/.test(e.key);\n  const isBackspaceKey = e.key === 'Backspace';\n  const isTabKey = e.key === 'Tab';\n  if (!isNumberKey && !isBackspaceKey && !isTabKey) {\n    e.preventDefault();\n  }\n  // if (/\\D/g.test(e.target.value)) {\n  //   e.target.value = e.target.value.replace(/[^0-9]/g, '');//(/\\D/g, '');\n  // }\n  // if (/[\\D][^0-9\\.\\,]/g.test(e.target.value)) {\n  //   e.target.value = e.target.value.replace(/[\\D][^0-9\\.\\,]/g, '');\n  // }\n};\n// /-----------------FORMAT YYYY-MM-DD    ,,1999-06-26\nexport const calculateAge = birthDate => {\n  const regex = /^\\w{3} \\w{3} \\d{2} \\d{4} \\d{2}:\\d{2}:\\d{2} GMT\\+\\d{4} \\(.+\\)$/;\n\n  // if (!regex.test(birthDate)) {\n  //   alert(\n  //     'Invalid date format. Please use \"(India Standard Time)\".'\n  //   );\n  //   return;\n  // }\n  const today = new Date();\n  const birthDateObj = new Date(birthDate);\n  let calculatedAge = today.getFullYear() - birthDateObj.getFullYear();\n\n  // Check if the birth date hasn't occurred yet this year\n  if (today.getMonth() < birthDateObj.getMonth() || today.getMonth() === birthDateObj.getMonth() && today.getDate() < birthDateObj.getDate()) {\n    calculatedAge--;\n  }\n  return calculatedAge;\n};","map":{"version":3,"names":["convertDateFormat","dateString","formatType","date","Date","options","hour","minute","day","month","hour12","formattedDate","toLocaleString","toUpperCase","getTimeDifferenceBtTwoDates","startDateString","endDateString","trimmedStartDateString","trimmedEndDateString","includes","slice","startDate","endDate","timeDifferenceInMs","Math","abs","hours","floor","minutes","convertArrayToTable","array","length","table","forEach","obj","_obj$CancellationChar","fromDate","FromDate","toDate","ToDate","policyString","PolicyString","CancellationCharge","CancellationChargeType","handleCharSpace","e","_e$target$value","inputValue","target","value","onlyAlphaRegix","which","preventDefault","handleNumInput","isNumberKey","test","key","isBackspaceKey","isTabKey","calculateAge","birthDate","regex","today","birthDateObj","calculatedAge","getFullYear","getMonth","getDate"],"sources":["/opt/lampp/htdocs/bitbucket/priortive/src/components/pages/Buses/BusModuleHelperFunctions.jsx"],"sourcesContent":["  //formatType(1) 2023-06-15T23:00:00 ----> Thu, Jun 15, 2023 at 23:00\n  //formatType() 2023-06-15T23:00:00 ----> 15:00, 16 JUN\nexport function convertDateFormat(dateString, formatType) {\n    const date = new Date(dateString);\n\n    // const options = {\n    //   weekday: \"short\",\n    //   year: \"numeric\",\n    //   month: \"short\",\n    //   day: \"numeric\",\n    //   hour: \"2-digit\",\n    //   minute: \"2-digit\",\n    //   hour12: false, // Set to false for 24-hour format\n    // };\n    const options = {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      day: \"numeric\",\n      month: \"short\",\n      hour12: false, // Set to false for 24-hour format\n    };\n\n    const formattedDate = date.toLocaleString(\"en-US\", options);\n    return formattedDate.toUpperCase();\n  }\n\n//   --------------------------------------------------------------------------------------\nexport function getTimeDifferenceBtTwoDates(startDateString, endDateString) {\n  let trimmedStartDateString ,trimmedEndDateString\n  if(startDateString.includes('Z')&&endDateString.includes('Z')){//2023-07-13T01:10:00.000Z\n    trimmedStartDateString  =startDateString.slice(0,-5)\n    trimmedEndDateString  =endDateString.slice(0,-5)\n\n  }else{//2023-07-07T01:02:00\n    trimmedStartDateString  =startDateString\n    trimmedEndDateString  =endDateString\n  }\n    const startDate = new Date(trimmedStartDateString);\n    const endDate = new Date(trimmedEndDateString);\n\n    const timeDifferenceInMs = Math.abs(endDate - startDate);\n    const hours = Math.floor(timeDifferenceInMs / (1000 * 60 * 60));\n    const minutes = Math.floor((timeDifferenceInMs / (1000 * 60)) % 60);\n\n    return `${hours} hrs ${minutes} min`;\n  }\n//**  ChargeType Amount = 1 ₹ , Percentage = 2 % ,Nights = 3   */\n  export function convertArrayToTable(array) {\n    if(array&&array.length>0){\n\n    \n    let table = '<table className=\"tablesClass\">';\n    \n    // Create table header\n    table += '<thead><tr><th>FromDate</th><th>ToDate</th><th>PolicyString</th><th>CancellationCharge</th></tr></thead>';\n    \n    array.forEach(obj => {\n      const fromDate = convertDateFormat(obj.FromDate);\n      const toDate = convertDateFormat(obj.ToDate);\n      const policyString = obj.PolicyString;\n      const CancellationCharge = `${obj?.CancellationCharge??\"\"} ${obj?.CancellationChargeType===1?\"₹\":\"%\"}`\n      \n      // Create a new row in the table\n      table += `<tbody><tr><td>${fromDate}</td><td>${toDate}</td><td>${policyString}</td> <td>${CancellationCharge}</td></tr></tbody>`;\n    });\n    \n    table += '</table>';\n    \n    return table;\n  }\n  }\n  // handleCharSpace for first letter\nexport const handleCharSpace = (e) => {\n  const inputValue = e.target.value;\n  let onlyAlphaRegix =  /^[a-zA-Z]+$/\n  if (e.target.value?.length === 0 && e.which === 32) {\n    e.preventDefault();\n  }\n  // else if(!onlyAlphaRegix.test(inputValue)){\n  //   e.preventDefault();\n  // }\n}\n// handleChange input only numbers\nexport const handleNumInput = (e) => {\n  const isNumberKey = /^[0-9]$/.test(e.key);\n  const isBackspaceKey = e.key === 'Backspace';\n  const isTabKey = e.key === 'Tab';\n\n  if (!isNumberKey && !isBackspaceKey && !isTabKey) {\n    e.preventDefault();\n  }\n  // if (/\\D/g.test(e.target.value)) {\n  //   e.target.value = e.target.value.replace(/[^0-9]/g, '');//(/\\D/g, '');\n  // }\n  // if (/[\\D][^0-9\\.\\,]/g.test(e.target.value)) {\n  //   e.target.value = e.target.value.replace(/[\\D][^0-9\\.\\,]/g, '');\n  // }\n}\n// /-----------------FORMAT YYYY-MM-DD    ,,1999-06-26\nexport const calculateAge = (birthDate) => {\n  const regex = /^\\w{3} \\w{3} \\d{2} \\d{4} \\d{2}:\\d{2}:\\d{2} GMT\\+\\d{4} \\(.+\\)$/;\n\n  // if (!regex.test(birthDate)) {\n  //   alert(\n  //     'Invalid date format. Please use \"(India Standard Time)\".'\n  //   );\n  //   return;\n  // }\n  const today = new Date();\n  const birthDateObj = new Date(birthDate);\n\n  let calculatedAge = today.getFullYear() - birthDateObj.getFullYear();\n\n  // Check if the birth date hasn't occurred yet this year\n  if (\n    today.getMonth() < birthDateObj.getMonth() ||\n    (today.getMonth() === birthDateObj.getMonth() &&\n      today.getDate() < birthDateObj.getDate())\n  ) {\n    calculatedAge--;\n  }\n  return calculatedAge;\n};\n\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}