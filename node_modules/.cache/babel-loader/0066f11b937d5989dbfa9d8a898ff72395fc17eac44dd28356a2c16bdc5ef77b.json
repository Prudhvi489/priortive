{"ast":null,"code":"const helperFunctions = {\n  findage: async dob => {\n    var today = new Date();\n    var givenDate = new Date(dob);\n    var yearsDiff = today.getFullYear() - givenDate.getFullYear();\n    var monthsDiff = today.getMonth() - givenDate.getMonth();\n    var daysDiff = today.getDate() - givenDate.getDate();\n    // Adjust for negative differences\n    if (daysDiff < 0) {\n      monthsDiff--;\n      daysDiff += new Date(today.getFullYear(), today.getMonth(), 0).getDate();\n    }\n    if (monthsDiff < 0) {\n      yearsDiff--;\n      monthsDiff += 12;\n    }\n\n    // Calculate the age in decimal format\n    var age = yearsDiff + monthsDiff / 12 + daysDiff / 365;\n    return age;\n    // console.log(\"Age: \" + age);\n\n    // return new Date().getFullYear() - parseInt(dob.split('-')[0]);\n  },\n\n  // Wednesday 28 Dec, 2022 date formate\n  getdate: async olddate => {\n    const date = new Date(olddate);\n    const options = {\n      weekday: 'long',\n      day: 'numeric',\n      month: 'short',\n      year: 'numeric'\n    };\n    const formatter = new Intl.DateTimeFormat('en-US', options);\n    const formattedDate = formatter.format(date);\n    return formattedDate;\n  },\n  getshortdate: olddate => {\n    //2023-07-07T01:02:00\n    let trimmedDateStr;\n    if (olddate.includes('Z')) {\n      //2023-07-13T01:10:00.000Z\n      trimmedDateStr = olddate.slice(0, -5);\n    }\n    const date = new Date(olddate.includes('Z') ? trimmedDateStr : olddate);\n    const options = {\n      weekday: 'short',\n      day: 'numeric',\n      month: 'short',\n      year: 'numeric'\n    };\n    const formatter = new Intl.DateTimeFormat('en-US', options);\n    // const formattedDate = formatter.format(date);\n    const parts = formatter.formatToParts(date);\n    const formattedDate = `${parts[0].value}, ${parts[4].value} ${parts[2].value} ${parts[6].value}`;\n    return formattedDate;\n  },\n  getapi_date: currentDate => {\n    if (currentDate === \"\" || currentDate === undefined) {\n      return \"\";\n    } else {\n      const day = String(new Date(currentDate).getDate()).padStart(2, '0');\n      const month = String(new Date(currentDate).getMonth() + 1).padStart(2, '0');\n      const year = new Date(currentDate).getFullYear();\n      const formattedDate = `${day}/${month}/${year}`;\n      // console.log(formattedDate);\n      return formattedDate;\n    }\n  },\n  nights_calc: (checkindate, checkoutdate) => {\n    const checkinDate = new Date(checkindate);\n    const checkoutDate = new Date(checkoutdate);\n    const timeDifference = checkoutDate.getTime() - checkinDate.getTime();\n    const oneDayInMilliseconds = 24 * 60 * 60 * 1000; // milliseconds in a day\n    const numberOfNights = Math.round(timeDifference / oneDayInMilliseconds);\n    // console.log(numberOfNights);\n    return numberOfNights;\n  },\n  // Date in Fri Dec 2023\n  get_short_date: date => {\n    const currentDate = new Date(date);\n    // console.log(currentDate,\"current date\")\n    const options = {\n      weekday: 'short',\n      month: 'short',\n      day: '2-digit'\n    };\n    const formattedDate = currentDate.toLocaleDateString('en-US', options); //.split(' ').reverse().join(' ');\n    return formattedDate;\n    console.log(formattedDate); // Output: \"Tue Jun 2023\"\n  },\n\n  // Date in 31 Dec 2023\n  get_numeric_date: date => {\n    const currentDate = new Date(date);\n    const day = currentDate.getDate();\n    const month = new Intl.DateTimeFormat('en', {\n      month: 'short'\n    }).format(currentDate);\n    const year = currentDate.getFullYear();\n    const formattedDate = `${day} ${month} ${year}`;\n    return formattedDate;\n  },\n  // Getting dayname\n  day_name: date => {\n    const dateObject = new Date(date);\n    const options = {\n      weekday: \"long\"\n    };\n    const dayName = dateObject.toLocaleDateString(\"en-US\", options);\n    return dayName; // Output: Tuesday   \n  },\n\n  // --------------------function to convert ISO Time str to YYYY-MM-DD format------------------------//\n  //type =1 MM-DD-YYYY, 2 - DD-MM-\n  // function to convert date string\n  // console.log(str, 'str')\n  convertDateStr: (str, type = 2) => {\n    if (str) {\n      if (type === 1) {\n        let date = str;\n        date = date.split('T');\n        date = date[0].split('-');\n        date = date[1] + \"-\" + date[2] + \"-\" + date[0];\n        return date;\n      } else {\n        let date = new Date(str),\n          mnth = (\"0\" + (date.getMonth() + 1)).slice(-2),\n          day = (\"0\" + date.getDate()).slice(-2);\n        return [day, mnth, date.getFullYear()].join(\"/\");\n      }\n    }\n  },\n  // time in 04:45am 12hrs formate\n  get_time: time24h => {\n    console.log(time24h, \"time\");\n    if (time24h) {\n      const dateTime = new Date(time24h);\n      const hours = dateTime.getHours();\n      const minutes = dateTime.getMinutes();\n      const seconds = dateTime.getSeconds();\n      const formattedTime = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n      // const formattedTime = `${hours}:${minutes}:${seconds}`;\n      return formattedTime;\n      // 12hrs formate\n      //   let trimmedString\n      //   if(time24h.includes('Z')){//2023-07-13T01:10:00.000Z\n      //      trimmedString = time24h.slice(0, -5);\n      //   }\n      //   const date=new Date(time24h.includes('Z')?trimmedString:time24h)//2023-07-07T01:02:00\n      //    const hours24=date.getHours()\n      //   //  console.log(hours24)\n      //   const hours12 = hours24 % 12 || 12;\n      //   const minutes = date.getMinutes();\n      //   const amPm = hours24 >= 12 ? 'PM' : 'AM';\n      //    const time12h = `${hours12.toString().padStart(2,'0')}:${minutes.toString().padStart(2,'0')} ${amPm}`;\n      //   //  console.log(time12h)\n      //  return time12h;\n    } else {\n      return '';\n    }\n  },\n  cancelltion_percentage: (pub_fare, cancel_fare) => {\n    if (cancel_fare.includes(\"INR\")) {\n      let cancel_amount = parseInt(cancel_fare.split(\" \")[1]);\n      let percent = Math.round(cancel_amount / pub_fare * 100);\n      return percent;\n    } else {\n      return cancel_fare;\n    }\n  },\n  // Hotel Fixed room calculation\n  hotel_fixedroom_price: (indexes, roomsarray) => {\n    let intitial_split = indexes.split(\"_\");\n    let splitarrays = intitial_split.map(str => str.split(\"|\"));\n    const category_ids = splitarrays.map(item => item[1]);\n    let indexarray = splitarrays.map(splitarray => parseInt(splitarray[0]));\n    let totalprice = 0;\n    for (let i = 0; i <= indexarray.length - 1; i++) {\n      const obj = roomsarray.find(item => item.RoomIndex === indexarray[i] && item.CategoryId === category_ids[i]);\n      if (obj && obj.Price && obj.Price.PublishedPriceRoundedOff) {\n        totalprice += obj.Price.PublishedPriceRoundedOff;\n      }\n    }\n    return totalprice;\n  },\n  // updated room price\n  Updated_room_price: data => {\n    const total_price = data.reduce((acc, curr) => {\n      return acc + curr.Price.PublishedPriceRoundedOff;\n    }, 0);\n    return total_price;\n  },\n  // cancellation days\n  calculateDateDifference: (date1, date2) => {\n    const firstDate = new Date(date1);\n    const secondDate = new Date(date2);\n    const timeDifference = secondDate.getTime() - firstDate.getTime();\n    const daysDifference = Math.ceil(timeDifference / (1000 * 3600 * 24));\n    return daysDifference;\n  },\n  // Hotel room cancellation penalty %\n  hotel_cancellation_penalty: (chargetype, amount, data, roomarray) => {\n    if (chargetype === 2) {\n      return amount;\n    } else {\n      let total_price;\n      if (typeof data === \"string\") {\n        total_price = helperFunctions.hotel_fixedroom_price(data, roomarray);\n      } else {\n        total_price = helperFunctions.Updated_room_price(data);\n      }\n      let percentage = Math.ceil(amount / total_price * 100);\n      return percentage;\n    }\n  },\n  // returns the cancellation amount in rupees\n  hotel_cancellation_penalty_rs: (chargetype, amount, data, roomarray) => {\n    if (chargetype !== 2) {\n      return amount;\n    } else {\n      let total_price;\n      if (typeof data === \"string\") {\n        total_price = helperFunctions.hotel_fixedroom_price(data, roomarray);\n      } else {\n        total_price = helperFunctions.Updated_room_price(data);\n      }\n      let price = Math.ceil(amount * total_price / 100);\n      return price;\n    }\n  },\n  // normalization of the path\n  normalizePath: path => {\n    const normalizedPath = path.replace(/\\/+$/, '');\n    return normalizedPath.startsWith('/') ? normalizedPath : `/{normalizedPath}`;\n  },\n  // checkin.checkout date conditional checking\n  checkoutdatechecking: (checkin, checkout) => {\n    const checkinDate = new Date(checkin);\n    const checkoutDate = new Date(checkout);\n    if (checkinDate.getDate() >= checkoutDate.getDate() && checkinDate.getMonth() === checkoutDate.getMonth() && checkinDate.getFullYear() === checkoutDate.getFullYear() || checkinDate.getMonth() > checkoutDate.getMonth() || checkinDate.getFullYear() > checkoutDate.getFullYear()) {\n      return true; // Checkout date is greater than check-in date\n    } else {\n      return false; // Checkout date is less than or equal to check-in date\n    }\n  },\n\n  // distance calculation between two locations\n  Disancecalculator: (lat1, lon1, lat2, lon2) => {\n    const earthRadius = 6371; // Radius of the Earth in kilometers\n\n    const toRadians = degrees => {\n      return degrees * (Math.PI / 180);\n    };\n    const deltaLat = toRadians(lat2 - lat1);\n    const deltaLon = toRadians(lon2 - lon1);\n    const a = Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) + Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) * Math.sin(deltaLon / 2) * Math.sin(deltaLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = earthRadius * c;\n    return distance;\n  },\n  // TAKES INPUT ISO UTC STRING  -- \"2023-08-10T05:24:00.000Z\" RETURNS IST STRING WITH FORMAT Promise { 'August 10, 2023 at 10:54 AM' }\n  convertToIst: utcDate => {\n    // Create a new Date object with the UTC date string\n    const date = new Date(utcDate);\n\n    // Convert the UTC time to IST by adding the offset\n    const istOffsetMinutes = 330; // IST offset is 5 hours 30 minutes ahead of UTC\n    const istDate = new Date(date.getTime() + istOffsetMinutes * 60000);\n    const isoIstStr = new Date(istDate.toISOString());\n    const isoString = \"2023-08-10T10:54:00.000Z\";\n    const datee = new Date(isoString);\n    const options = {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: true\n    };\n    const formattedDate = datee.toLocaleString('en-US', options);\n    console.log(formattedDate);\n    return istDate.toISOString();\n  }\n};\nexport default helperFunctions;","map":{"version":3,"names":["helperFunctions","findage","dob","today","Date","givenDate","yearsDiff","getFullYear","monthsDiff","getMonth","daysDiff","getDate","age","getdate","olddate","date","options","weekday","day","month","year","formatter","Intl","DateTimeFormat","formattedDate","format","getshortdate","trimmedDateStr","includes","slice","parts","formatToParts","value","getapi_date","currentDate","undefined","String","padStart","nights_calc","checkindate","checkoutdate","checkinDate","checkoutDate","timeDifference","getTime","oneDayInMilliseconds","numberOfNights","Math","round","get_short_date","toLocaleDateString","console","log","get_numeric_date","day_name","dateObject","dayName","convertDateStr","str","type","split","mnth","join","get_time","time24h","dateTime","hours","getHours","minutes","getMinutes","seconds","getSeconds","formattedTime","toString","cancelltion_percentage","pub_fare","cancel_fare","cancel_amount","parseInt","percent","hotel_fixedroom_price","indexes","roomsarray","intitial_split","splitarrays","map","category_ids","item","indexarray","splitarray","totalprice","i","length","obj","find","RoomIndex","CategoryId","Price","PublishedPriceRoundedOff","Updated_room_price","data","total_price","reduce","acc","curr","calculateDateDifference","date1","date2","firstDate","secondDate","daysDifference","ceil","hotel_cancellation_penalty","chargetype","amount","roomarray","percentage","hotel_cancellation_penalty_rs","price","normalizePath","path","normalizedPath","replace","startsWith","checkoutdatechecking","checkin","checkout","Disancecalculator","lat1","lon1","lat2","lon2","earthRadius","toRadians","degrees","PI","deltaLat","deltaLon","a","sin","cos","c","atan2","sqrt","distance","convertToIst","utcDate","istOffsetMinutes","istDate","isoIstStr","toISOString","isoString","datee","hour","minute","hour12","toLocaleString"],"sources":["/opt/lampp/htdocs/bitbucket/priortive/src/helpers/helperFunctions.js"],"sourcesContent":["const helperFunctions = {\n  findage: async (dob) => {\n    var today = new Date();\n    var givenDate = new Date(dob);\n\n    var yearsDiff = today.getFullYear() - givenDate.getFullYear();\n    var monthsDiff = today.getMonth() - givenDate.getMonth();\n    var daysDiff = today.getDate() - givenDate.getDate();\n    // Adjust for negative differences\n    if (daysDiff < 0) {\n      monthsDiff--;\n      daysDiff += new Date(today.getFullYear(), today.getMonth(), 0).getDate();\n    }\n    if (monthsDiff < 0) {\n      yearsDiff--;\n      monthsDiff += 12;\n    }\n\n    // Calculate the age in decimal format\n    var age = yearsDiff + (monthsDiff / 12) + (daysDiff / 365);\n    return age;\n    // console.log(\"Age: \" + age);\n\n    // return new Date().getFullYear() - parseInt(dob.split('-')[0]);\n  },\n  // Wednesday 28 Dec, 2022 date formate\n  getdate: async (olddate) => {\n    const date = new Date(olddate);\n    const options = { weekday: 'long', day: 'numeric', month: 'short', year: 'numeric' };\n    const formatter = new Intl.DateTimeFormat('en-US', options);\n    const formattedDate = formatter.format(date);\n    return formattedDate;\n  },\n  getshortdate: (olddate) => {//2023-07-07T01:02:00\n    let trimmedDateStr \n    if(olddate.includes('Z')){//2023-07-13T01:10:00.000Z\n      trimmedDateStr = olddate.slice(0,-5)\n    }\n    const date = new Date(olddate.includes('Z')?trimmedDateStr:olddate);\n    const options = { weekday: 'short', day: 'numeric', month: 'short', year: 'numeric' };\n    const formatter = new Intl.DateTimeFormat('en-US', options);\n    // const formattedDate = formatter.format(date);\n    const parts = formatter.formatToParts(date);\n    const formattedDate = `${parts[0].value}, ${parts[4].value} ${parts[2].value} ${parts[6].value}`;\n    return formattedDate;\n\n  },\n  getapi_date:(currentDate)=>{\n    if(currentDate===\"\"||currentDate===undefined){\n      return \"\";\n    }\n    else{\n      const day = String(new Date(currentDate).getDate()).padStart(2, '0');\n      const month = String(new Date(currentDate).getMonth() + 1).padStart(2, '0');\n      const year = new Date(currentDate).getFullYear();\n      const formattedDate = `${day}/${month}/${year}`;\n      // console.log(formattedDate);\n      return formattedDate;\n    }\n   \n  },\n  nights_calc:(checkindate,checkoutdate)=>{\n    const checkinDate = new Date(checkindate);\n    const checkoutDate = new Date(checkoutdate);\n    const timeDifference = checkoutDate.getTime() - checkinDate.getTime();\n    const oneDayInMilliseconds = 24 * 60 * 60 * 1000; // milliseconds in a day\n    const numberOfNights = Math.round(timeDifference / oneDayInMilliseconds);\n// console.log(numberOfNights);\nreturn numberOfNights;\n  },\n  // Date in Fri Dec 2023\n  get_short_date:(date)=>{\n    const currentDate = new Date(date);\n    // console.log(currentDate,\"current date\")\n    const options = { weekday: 'short', month: 'short', day: '2-digit' };\n    const formattedDate = currentDate.toLocaleDateString('en-US', options);//.split(' ').reverse().join(' ');\n    return formattedDate;\n    console.log(formattedDate); // Output: \"Tue Jun 2023\"\n  },\n  // Date in 31 Dec 2023\n  get_numeric_date:(date)=>{\n    const currentDate = new Date(date);\n    const day = currentDate.getDate();\n    const month = new Intl.DateTimeFormat('en', { month: 'short' }).format(currentDate);\n    const year = currentDate.getFullYear();\n    const formattedDate = `${day} ${month} ${year}`;\n    return formattedDate;\n  },\n  // Getting dayname\n  day_name:(date)=>{\n    const dateObject = new Date(date);\n    const options = { weekday: \"long\" };\n    const dayName = dateObject.toLocaleDateString(\"en-US\", options);\n    return dayName; // Output: Tuesday   \n  },\n  // --------------------function to convert ISO Time str to YYYY-MM-DD format------------------------//\n   //type =1 MM-DD-YYYY, 2 - DD-MM-\n    // function to convert date string\n    // console.log(str, 'str')\n  convertDateStr: (str, type = 2) => {\n    if (str) {\n      if (type === 1) {\n        let date = str;\n        date = date.split('T');\n        date = date[0].split('-');\n        date = date[1] + \"-\" + date[2] + \"-\" + date[0];\n        return date;\n      } else {\n        let date = new Date(str),\n          mnth = (\"0\" + (date.getMonth() + 1)).slice(-2),\n          day = (\"0\" + date.getDate()).slice(-2);\n        return [day,mnth,date.getFullYear()].join(\"/\");\n      }\n    }\n  },\n  // time in 04:45am 12hrs formate\n  get_time:(time24h)=>{\n    console.log(time24h,\"time\")\n    if(time24h){\n      const dateTime = new Date(time24h);\n\nconst hours = dateTime.getHours();\nconst minutes = dateTime.getMinutes();\nconst seconds = dateTime.getSeconds();\nconst formattedTime = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n// const formattedTime = `${hours}:${minutes}:${seconds}`;\nreturn formattedTime;\n// 12hrs formate\n    //   let trimmedString\n    //   if(time24h.includes('Z')){//2023-07-13T01:10:00.000Z\n    //      trimmedString = time24h.slice(0, -5);\n    //   }\n    //   const date=new Date(time24h.includes('Z')?trimmedString:time24h)//2023-07-07T01:02:00\n    //    const hours24=date.getHours()\n    //   //  console.log(hours24)\n    //   const hours12 = hours24 % 12 || 12;\n    //   const minutes = date.getMinutes();\n    //   const amPm = hours24 >= 12 ? 'PM' : 'AM';\n    //    const time12h = `${hours12.toString().padStart(2,'0')}:${minutes.toString().padStart(2,'0')} ${amPm}`;\n    //   //  console.log(time12h)\n    //  return time12h;\n    }else{\n      return ''\n    }\n   \n  },\n  cancelltion_percentage:(pub_fare,cancel_fare)=>{\n    if(cancel_fare.includes(\"INR\")){\n      let cancel_amount=parseInt(cancel_fare.split(\" \")[1]);\n      let percent=Math.round((cancel_amount/pub_fare)*100);\n      return percent;\n    }\n    else{\n      return cancel_fare\n    }\n  },\n  // Hotel Fixed room calculation\n  hotel_fixedroom_price:(indexes,roomsarray)=>{\n    let intitial_split=indexes.split(\"_\")\n    let splitarrays=intitial_split.map((str)=>str.split(\"|\"));\n    const category_ids=splitarrays.map((item)=>item[1])\n    let indexarray=splitarrays.map((splitarray)=>parseInt(splitarray[0]))\n    let totalprice=0\n    for(let i=0;i<=indexarray.length-1;i++){\n      const obj=roomsarray.find(item=>item.RoomIndex===indexarray[i]&&item.CategoryId===category_ids[i])\n      if(obj&& obj.Price && obj.Price.PublishedPriceRoundedOff){\n      totalprice+=obj.Price.PublishedPriceRoundedOff\n      }\n    }\n    return totalprice\n  },\n  // updated room price\n  Updated_room_price:(data)=>{\n    const total_price=data.reduce((acc,curr)=>{\n      return acc+curr.Price.PublishedPriceRoundedOff\n    },0)\n    return total_price;\n  },\n  // cancellation days\n  calculateDateDifference: (date1, date2) => {\n    const firstDate = new Date(date1);\n    const secondDate = new Date(date2);\n    const timeDifference = secondDate.getTime() - firstDate.getTime();\n    const daysDifference = Math.ceil(timeDifference / (1000 * 3600 * 24));\n    return daysDifference;\n  },\n  // Hotel room cancellation penalty %\n  hotel_cancellation_penalty:(chargetype,amount,data,roomarray)=>{\n    if(chargetype===2){\n      return amount;\n    }\n    else{\n      let total_price;\n      if(typeof data===\"string\"){\n        total_price=helperFunctions.hotel_fixedroom_price(data,roomarray)\n      }\n      else{\n\n        total_price=helperFunctions.Updated_room_price(data);\n      }\n      let percentage=Math.ceil((amount/total_price)*100);\n      return percentage;\n    }\n     \n  },\n  // returns the cancellation amount in rupees\n  hotel_cancellation_penalty_rs:(chargetype,amount,data,roomarray)=>{\n    if(chargetype!==2){\n      return amount\n    }\n    else{\n      let total_price;\n      if(typeof data===\"string\"){\n        total_price=helperFunctions.hotel_fixedroom_price(data,roomarray)\n      }\n      else{\n        total_price=helperFunctions.Updated_room_price(data);\n      }\n      let price=Math.ceil((amount*total_price)/100);\n      return price;\n    }\n  },\n  // normalization of the path\n normalizePath :(path)=>\n{\n  const normalizedPath = path.replace(/\\/+$/, '');\n  return normalizedPath.startsWith('/') ? normalizedPath : `/{normalizedPath}`;\n},\n// checkin.checkout date conditional checking\ncheckoutdatechecking:(checkin,checkout)=>{\n  const checkinDate = new Date(checkin);\n  const checkoutDate = new Date(checkout);\n  if ((checkinDate.getDate()>=checkoutDate.getDate()&&checkinDate.getMonth()===checkoutDate.getMonth()&&checkinDate.getFullYear()===checkoutDate.getFullYear())||(checkinDate.getMonth()>checkoutDate.getMonth())||(checkinDate.getFullYear()>checkoutDate.getFullYear())) {\n    return true; // Checkout date is greater than check-in date\n  } else {\n    return false; // Checkout date is less than or equal to check-in date\n  }\n},\n// distance calculation between two locations\nDisancecalculator:(lat1, lon1, lat2, lon2)=> {\n  const earthRadius = 6371; // Radius of the Earth in kilometers\n\n  const toRadians = (degrees) => {\n    return degrees * (Math.PI / 180);\n  };\n\n  const deltaLat = toRadians(lat2 - lat1);\n  const deltaLon = toRadians(lon2 - lon1);\n\n  const a =\n    Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) +\n    Math.cos(toRadians(lat1)) *\n      Math.cos(toRadians(lat2)) *\n      Math.sin(deltaLon / 2) *\n      Math.sin(deltaLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n  const distance = earthRadius * c;\n  return distance;\n},\n// TAKES INPUT ISO UTC STRING  -- \"2023-08-10T05:24:00.000Z\" RETURNS IST STRING WITH FORMAT Promise { 'August 10, 2023 at 10:54 AM' }\nconvertToIst :  (utcDate) => {\n  // Create a new Date object with the UTC date string\n  const date = new Date(utcDate);\n  \n  // Convert the UTC time to IST by adding the offset\n  const istOffsetMinutes = 330; // IST offset is 5 hours 30 minutes ahead of UTC\n  const istDate = new Date(date.getTime() + (istOffsetMinutes) * 60000);\n const isoIstStr =  new Date(istDate.toISOString());\n const isoString = \"2023-08-10T10:54:00.000Z\";\n const datee = new Date(isoString);\n \n const options = {\n   year: 'numeric',\n   month: 'long',\n   day: 'numeric',\n   hour: '2-digit',\n   minute: '2-digit',\n   hour12: true\n };\n \n const formattedDate = datee.toLocaleString('en-US', options);\n \n console.log(formattedDate);\n  return istDate.toISOString()\n  },\n\n}\n\nexport default helperFunctions;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}