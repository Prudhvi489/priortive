{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n// after dispatching the action we have to send the data in the formate of array\nconst initialState = {\n  Fsearcheddata: \"\",\n  Flightsdata: [],\n  multicitytripcount: 2,\n  waytype: 1,\n  Traceid: ''\n};\nconst FlightsearchSlice = createSlice({\n  name: 'flightsearch',\n  initialState,\n  reducers: {\n    // search data updated here\n    Flights_search_dataupdate(state, action) {\n      const received_data = action.payload;\n      // alert(\"Slice\")\n      // console.log(received_data)\n      const data_length = received_data.length - 1;\n      if (received_data[data_length] === 1) {\n        // console.log(\"one way search\")\n        state.Fsearcheddata = received_data[0];\n        state.Flightsdata = received_data[1];\n        state.Traceid = received_data[2];\n        state.waytype = received_data[3];\n      } else if (received_data[data_length] === 2) {\n        // console.log(\"Round trip\")\n        state.Fsearcheddata = received_data[0];\n        state.Flightsdata = received_data[1];\n        state.Traceid = received_data[2];\n        state.waytype = received_data[3];\n      } else if (received_data[data_length] === 3) {\n        // console.log(\"multicity\")\n        state.Fsearcheddata = received_data[0];\n        state.Flightsdata = received_data[1];\n        state.Traceid = received_data[2];\n        state.waytype = received_data[3];\n      }\n    },\n    multicitycountupdate(state, action) {\n      state.multicitytripcount = action.payload;\n    }\n  }\n});\nexport const FlightsearchActions = FlightsearchSlice.actions;\nexport default FlightsearchSlice;","map":{"version":3,"names":["createSlice","initialState","Fsearcheddata","Flightsdata","multicitytripcount","waytype","Traceid","FlightsearchSlice","name","reducers","Flights_search_dataupdate","state","action","received_data","payload","data_length","length","multicitycountupdate","FlightsearchActions","actions"],"sources":["/opt/lampp/htdocs/bitbucket/priortive/src/store/FlightsearchSlice.jsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n// after dispatching the action we have to send the data in the formate of array\nconst initialState={Fsearcheddata:\"\",Flightsdata:[],multicitytripcount:2,waytype:1,Traceid:''}\nconst FlightsearchSlice=createSlice({\n    name:'flightsearch',\n    initialState,\n    reducers:{\n        // search data updated here\n        Flights_search_dataupdate(state,action){\n            const received_data=action.payload;\n            // alert(\"Slice\")\n            // console.log(received_data)\n            const data_length = received_data.length-1\n            if(received_data[data_length]===1){\n                // console.log(\"one way search\")\n                state.Fsearcheddata=received_data[0];\n                state.Flightsdata=received_data[1];\n                state.Traceid=received_data[2]\n                state.waytype=received_data[3]\n            }\n            else if(received_data[data_length]===2){\n                // console.log(\"Round trip\")\n                state.Fsearcheddata=received_data[0];\n                state.Flightsdata=received_data[1];\n                state.Traceid=received_data[2]\n                state.waytype=received_data[3]\n            }\n            else if(received_data[data_length]===3){\n                // console.log(\"multicity\")\n                state.Fsearcheddata=received_data[0];\n                state.Flightsdata=received_data[1];\n                state.Traceid=received_data[2]\n                state.waytype=received_data[3]\n            }\n        },\n        \n        multicitycountupdate(state,action){\n            state.multicitytripcount=action.payload\n        }\n    }\n})\nexport const FlightsearchActions=FlightsearchSlice.actions;\nexport default FlightsearchSlice;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C;AACA,MAAMC,YAAY,GAAC;EAACC,aAAa,EAAC,EAAE;EAACC,WAAW,EAAC,EAAE;EAACC,kBAAkB,EAAC,CAAC;EAACC,OAAO,EAAC,CAAC;EAACC,OAAO,EAAC;AAAE,CAAC;AAC9F,MAAMC,iBAAiB,GAACP,WAAW,CAAC;EAChCQ,IAAI,EAAC,cAAc;EACnBP,YAAY;EACZQ,QAAQ,EAAC;IACL;IACAC,yBAAyBA,CAACC,KAAK,EAACC,MAAM,EAAC;MACnC,MAAMC,aAAa,GAACD,MAAM,CAACE,OAAO;MAClC;MACA;MACA,MAAMC,WAAW,GAAGF,aAAa,CAACG,MAAM,GAAC,CAAC;MAC1C,IAAGH,aAAa,CAACE,WAAW,CAAC,KAAG,CAAC,EAAC;QAC9B;QACAJ,KAAK,CAACT,aAAa,GAACW,aAAa,CAAC,CAAC,CAAC;QACpCF,KAAK,CAACR,WAAW,GAACU,aAAa,CAAC,CAAC,CAAC;QAClCF,KAAK,CAACL,OAAO,GAACO,aAAa,CAAC,CAAC,CAAC;QAC9BF,KAAK,CAACN,OAAO,GAACQ,aAAa,CAAC,CAAC,CAAC;MAClC,CAAC,MACI,IAAGA,aAAa,CAACE,WAAW,CAAC,KAAG,CAAC,EAAC;QACnC;QACAJ,KAAK,CAACT,aAAa,GAACW,aAAa,CAAC,CAAC,CAAC;QACpCF,KAAK,CAACR,WAAW,GAACU,aAAa,CAAC,CAAC,CAAC;QAClCF,KAAK,CAACL,OAAO,GAACO,aAAa,CAAC,CAAC,CAAC;QAC9BF,KAAK,CAACN,OAAO,GAACQ,aAAa,CAAC,CAAC,CAAC;MAClC,CAAC,MACI,IAAGA,aAAa,CAACE,WAAW,CAAC,KAAG,CAAC,EAAC;QACnC;QACAJ,KAAK,CAACT,aAAa,GAACW,aAAa,CAAC,CAAC,CAAC;QACpCF,KAAK,CAACR,WAAW,GAACU,aAAa,CAAC,CAAC,CAAC;QAClCF,KAAK,CAACL,OAAO,GAACO,aAAa,CAAC,CAAC,CAAC;QAC9BF,KAAK,CAACN,OAAO,GAACQ,aAAa,CAAC,CAAC,CAAC;MAClC;IACJ,CAAC;IAEDI,oBAAoBA,CAACN,KAAK,EAACC,MAAM,EAAC;MAC9BD,KAAK,CAACP,kBAAkB,GAACQ,MAAM,CAACE,OAAO;IAC3C;EACJ;AACJ,CAAC,CAAC;AACF,OAAO,MAAMI,mBAAmB,GAACX,iBAAiB,CAACY,OAAO;AAC1D,eAAeZ,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}