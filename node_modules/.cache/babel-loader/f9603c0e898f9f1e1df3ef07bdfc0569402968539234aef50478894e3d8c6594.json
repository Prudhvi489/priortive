{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  hotelresult: {},\n  gmt_tbo_hotels: [],\n  gmt_hotels_count: 0,\n  country: {\n    id: 101,\n    country_name: 'India',\n    country_code: 'IN'\n  },\n  destination: {\n    city_id: \"130443\",\n    city_name: 'Delhi',\n    country: 'India',\n    country_code: 'IN   ',\n    source_id: 130443,\n    type: \"1\"\n  },\n  nationality: {\n    id: 74,\n    country_name: 'India',\n    country_code: 'IN',\n    code: '+91',\n    country_flag: 'http://3.111.86.205/in.png'\n  }\n};\nconst HotelDataslice = createSlice({\n  name: \"HotelData\",\n  initialState,\n  reducers: {\n    //if second element value in the array is 1 then it is initialsearch\n    Hotel_data(state, action) {\n      if (action.payload[1] === 1) {\n        state.hotelresult = action.payload[0];\n      } else {\n        state.hotelresult.Hotels = [...state.hotelresult.Hotels, ...action.payload[0].Hotels];\n      }\n    },\n    // tbo,gmt_hotel merged data\n    merged_hotels(state, action) {\n      if (action.payload[1] === 1) {\n        state.gmt_tbo_hotels = action.payload[0];\n      } else {\n        state.gmt_tbo_hotels = [...state.gmt_tbo_hotels, ...action.payload[0]];\n      }\n    },\n    // gmt_hotelscount\n    gmt_hotel_count(state, action) {\n      state.gmt_hotels_count = action.payload;\n    },\n    country_data(state, action) {\n      state.country = action.payload;\n    },\n    destination_data(state, action) {\n      state.destination = action.payload;\n    },\n    nationality_data(state, action) {\n      state.nationality = action.payload;\n    }\n  }\n});\nexport const hoteldataActions = HotelDataslice.actions;\nexport default HotelDataslice;","map":{"version":3,"names":["createSlice","initialState","hotelresult","gmt_tbo_hotels","gmt_hotels_count","country","id","country_name","country_code","destination","city_id","city_name","source_id","type","nationality","code","country_flag","HotelDataslice","name","reducers","Hotel_data","state","action","payload","Hotels","merged_hotels","gmt_hotel_count","country_data","destination_data","nationality_data","hoteldataActions","actions"],"sources":["/opt/lampp/htdocs/bitbucket/priortive/src/store/Hotelslices.jsx/HotelDataslice.jsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState={hotelresult:{},gmt_tbo_hotels:[],gmt_hotels_count:0,country:{id: 101, country_name: 'India', country_code: 'IN'},destination:{city_id:\"130443\",city_name: 'Delhi', country: 'India', country_code: 'IN   ', source_id: 130443, type: \"1\"},nationality:{id: 74, country_name: 'India', country_code: 'IN', code: '+91', country_flag: 'http://3.111.86.205/in.png'}}\nconst HotelDataslice=createSlice({\n    name:\"HotelData\",\n    initialState,\n    reducers:{\n        //if second element value in the array is 1 then it is initialsearch\n        Hotel_data(state,action){\n            if(action.payload[1]===1){\n                state.hotelresult=action.payload[0];\n            }\n            else{\n                state.hotelresult.Hotels=[...state.hotelresult.Hotels,...action.payload[0].Hotels]\n            }\n        },\n        // tbo,gmt_hotel merged data\n        merged_hotels(state,action){\n            if(action.payload[1]===1){\n                state.gmt_tbo_hotels=action.payload[0];\n            }\n            else{\n                state.gmt_tbo_hotels=[...state.gmt_tbo_hotels,...action.payload[0]]\n            }\n        },\n        // gmt_hotelscount\n        gmt_hotel_count(state,action){\n            state.gmt_hotels_count=action.payload;\n        },\n        country_data(state,action){\n            state.country=action.payload;\n        },\n        destination_data(state,action){\n            state.destination=action.payload;\n        },\n        nationality_data(state,action){\n            state.nationality=action.payload;\n        }\n    }\n})\nexport const hoteldataActions = HotelDataslice.actions;\nexport default HotelDataslice;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,MAAMC,YAAY,GAAC;EAACC,WAAW,EAAC,CAAC,CAAC;EAACC,cAAc,EAAC,EAAE;EAACC,gBAAgB,EAAC,CAAC;EAACC,OAAO,EAAC;IAACC,EAAE,EAAE,GAAG;IAAEC,YAAY,EAAE,OAAO;IAAEC,YAAY,EAAE;EAAI,CAAC;EAACC,WAAW,EAAC;IAACC,OAAO,EAAC,QAAQ;IAACC,SAAS,EAAE,OAAO;IAAEN,OAAO,EAAE,OAAO;IAAEG,YAAY,EAAE,OAAO;IAAEI,SAAS,EAAE,MAAM;IAAEC,IAAI,EAAE;EAAG,CAAC;EAACC,WAAW,EAAC;IAACR,EAAE,EAAE,EAAE;IAAEC,YAAY,EAAE,OAAO;IAAEC,YAAY,EAAE,IAAI;IAAEO,IAAI,EAAE,KAAK;IAAEC,YAAY,EAAE;EAA4B;AAAC,CAAC;AACvX,MAAMC,cAAc,GAACjB,WAAW,CAAC;EAC7BkB,IAAI,EAAC,WAAW;EAChBjB,YAAY;EACZkB,QAAQ,EAAC;IACL;IACAC,UAAUA,CAACC,KAAK,EAACC,MAAM,EAAC;MACpB,IAAGA,MAAM,CAACC,OAAO,CAAC,CAAC,CAAC,KAAG,CAAC,EAAC;QACrBF,KAAK,CAACnB,WAAW,GAACoB,MAAM,CAACC,OAAO,CAAC,CAAC,CAAC;MACvC,CAAC,MACG;QACAF,KAAK,CAACnB,WAAW,CAACsB,MAAM,GAAC,CAAC,GAAGH,KAAK,CAACnB,WAAW,CAACsB,MAAM,EAAC,GAAGF,MAAM,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,MAAM,CAAC;MACtF;IACJ,CAAC;IACD;IACAC,aAAaA,CAACJ,KAAK,EAACC,MAAM,EAAC;MACvB,IAAGA,MAAM,CAACC,OAAO,CAAC,CAAC,CAAC,KAAG,CAAC,EAAC;QACrBF,KAAK,CAAClB,cAAc,GAACmB,MAAM,CAACC,OAAO,CAAC,CAAC,CAAC;MAC1C,CAAC,MACG;QACAF,KAAK,CAAClB,cAAc,GAAC,CAAC,GAAGkB,KAAK,CAAClB,cAAc,EAAC,GAAGmB,MAAM,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;MACvE;IACJ,CAAC;IACD;IACAG,eAAeA,CAACL,KAAK,EAACC,MAAM,EAAC;MACzBD,KAAK,CAACjB,gBAAgB,GAACkB,MAAM,CAACC,OAAO;IACzC,CAAC;IACDI,YAAYA,CAACN,KAAK,EAACC,MAAM,EAAC;MACtBD,KAAK,CAAChB,OAAO,GAACiB,MAAM,CAACC,OAAO;IAChC,CAAC;IACDK,gBAAgBA,CAACP,KAAK,EAACC,MAAM,EAAC;MAC1BD,KAAK,CAACZ,WAAW,GAACa,MAAM,CAACC,OAAO;IACpC,CAAC;IACDM,gBAAgBA,CAACR,KAAK,EAACC,MAAM,EAAC;MAC1BD,KAAK,CAACP,WAAW,GAACQ,MAAM,CAACC,OAAO;IACpC;EACJ;AACJ,CAAC,CAAC;AACF,OAAO,MAAMO,gBAAgB,GAAGb,cAAc,CAACc,OAAO;AACtD,eAAed,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}