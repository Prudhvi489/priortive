{"version":3,"file":"TimePicker.js","sources":["../../src/TimePicker/TimePicker.tsx"],"sourcesContent":["import { useUtils } from '../_shared/hooks/useUtils';\nimport { TimePickerToolbar } from './TimePickerToolbar';\nimport { PureDateInput } from '../_shared/PureDateInput';\nimport { KeyboardDateInput } from '../_shared/KeyboardDateInput';\nimport { timePickerDefaultProps } from '../constants/prop-types';\nimport { usePickerState } from '../_shared/hooks/usePickerState';\nimport { pick12hOr24hFormat } from '../_helpers/text-field-helper';\nimport { useKeyboardPickerState } from '../_shared/hooks/useKeyboardPickerState';\nimport {\n  WithKeyboardInputProps,\n  makePickerWithState,\n  WithPureInputProps,\n} from '../Picker/makePickerWithState';\nimport { MaterialUiPickersDate } from '../typings/date';\nimport { DatePickerView } from '../DatePicker';\n\ntype TimePickerView = 'hours' | 'minutes' | 'seconds';\n\nexport interface BaseTimePickerProps {\n  /**\n   * 12h/24h view for hour selection clock\n   * @default true\n   */\n  ampm?: boolean;\n  /**\n   * Step over minutes\n   * @default 1\n   */\n  minutesStep?: number;\n}\n\nexport interface TimePickerViewsProps extends BaseTimePickerProps {\n  /**\n   * Array of views to show\n   * @type {Array<\"year\" | \"date\" | \"month\">}\n   */\n  views?: TimePickerView[];\n  /** First view to show in DatePicker */\n  openTo?: TimePickerView;\n  date: MaterialUiPickersDate;\n}\n\nexport type TimePickerProps = WithPureInputProps & TimePickerViewsProps;\n\nexport type KeyboardTimePickerProps = WithKeyboardInputProps & TimePickerViewsProps;\n\nconst defaultProps = {\n  ...timePickerDefaultProps,\n  openTo: 'hours' as TimePickerView,\n  views: (['hours', 'minutes'] as unknown) as TimePickerView[],\n};\n\nfunction useOptions(props: TimePickerProps | KeyboardTimePickerProps) {\n  const utils = useUtils();\n\n  return {\n    getDefaultFormat: () =>\n      pick12hOr24hFormat(props.format, props.ampm, {\n        '12h': utils.time12hFormat,\n        '24h': utils.time24hFormat,\n      }),\n  };\n}\n\nexport const TimePicker = makePickerWithState<TimePickerProps>({\n  useOptions,\n  Input: PureDateInput,\n  useState: usePickerState,\n  DefaultToolbarComponent: TimePickerToolbar,\n});\n\nexport const KeyboardTimePicker = makePickerWithState<KeyboardTimePickerProps>({\n  useOptions,\n  Input: KeyboardDateInput,\n  useState: useKeyboardPickerState,\n  DefaultToolbarComponent: TimePickerToolbar,\n  getCustomProps: props => ({\n    refuse: props.ampm ? /[^\\dap]+/gi : /[^\\d]+/gi,\n  }),\n});\n\nTimePicker.defaultProps = defaultProps;\n\nKeyboardTimePicker.defaultProps = defaultProps;\n"],"names":["defaultProps","timePickerDefaultProps","openTo","views","useOptions","props","utils","useUtils","getDefaultFormat","pick12hOr24hFormat","format","ampm","time12hFormat","time24hFormat","TimePicker","makePickerWithState","Input","PureDateInput","useState","usePickerState","DefaultToolbarComponent","TimePickerToolbar","KeyboardTimePicker","KeyboardDateInput","useKeyboardPickerState","getCustomProps","refuse"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA,IAAMA,YAAY,mCACbC,sBADa;AAEhBC,EAAAA,MAAM,EAAE,OAFQ;AAGhBC,EAAAA,KAAK,EAAG,CAAC,OAAD,EAAU,SAAV;AAHQ,EAAlB;;AAMA,SAASC,UAAT,CAAoBC,KAApB,EAAsE;AACpE,MAAMC,KAAK,GAAGC,QAAQ,EAAtB;AAEA,SAAO;AACLC,IAAAA,gBAAgB,EAAE;AAAA,aAChBC,kBAAkB,CAACJ,KAAK,CAACK,MAAP,EAAeL,KAAK,CAACM,IAArB,EAA2B;AAC3C,eAAOL,KAAK,CAACM,aAD8B;AAE3C,eAAON,KAAK,CAACO;AAF8B,OAA3B,CADF;AAAA;AADb,GAAP;AAOD;;IAEYC,UAAU,GAAGC,mBAAmB,CAAkB;AAC7DX,EAAAA,UAAU,EAAVA,UAD6D;AAE7DY,EAAAA,KAAK,EAAEC,aAFsD;AAG7DC,EAAAA,QAAQ,EAAEC,cAHmD;AAI7DC,EAAAA,uBAAuB,EAAEC;AAJoC,CAAlB;IAOhCC,kBAAkB,GAAGP,mBAAmB,CAA0B;AAC7EX,EAAAA,UAAU,EAAVA,UAD6E;AAE7EY,EAAAA,KAAK,EAAEO,iBAFsE;AAG7EL,EAAAA,QAAQ,EAAEM,sBAHmE;AAI7EJ,EAAAA,uBAAuB,EAAEC,iBAJoD;AAK7EI,EAAAA,cAAc,EAAE,wBAAApB,KAAK;AAAA,WAAK;AACxBqB,MAAAA,MAAM,EAAErB,KAAK,CAACM,IAAN,GAAa,YAAb,GAA4B;AADZ,KAAL;AAAA;AALwD,CAA1B;AAUrDG,UAAU,CAACd,YAAX,GAA0BA,YAA1B;AAEAsB,kBAAkB,CAACtB,YAAnB,GAAkCA,YAAlC;;;;"}